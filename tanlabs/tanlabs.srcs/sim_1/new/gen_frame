#!/usr/bin/env python3

# Requirements:
#   sudo apt install python3-pip
#   sudo pip3 install scapy
# Usage:
#   ./gen_frame [send]
# or
#   python3 gen_frame [send]

from scapy import *
from scapy.utils import *
from scapy.utils6 import *
from scapy.layers.l2 import *
from scapy.layers.inet import *
from scapy.layers.inet6 import *
from scapy.layers.rip import *
from scapy.contrib.ripng import *
import binascii
import sys
import struct

SEND_FRAMES = len(sys.argv) >= 2 and sys.argv[1] == 'send'

# The broadcast MAC address.
# Also used when we do not know the router's MAC address when sending IP packets.
MAC_BROADCAST = 'ff:ff:ff:ff:ff:ff'

MAC_DUT0 = MAC_BROADCAST
MAC_DUT1 = MAC_BROADCAST
MAC_TESTER0 = '8c:1f:64:69:10:01'
MAC_TESTER1 = '8c:1f:64:69:10:02'
MAC_OTHERS = '40:41:42:43:44:45'
IFACE_DEFAULT_ROUTE = 3
MAC_DEFAULT_ROUTE = '8c:1f:64:69:10:04'

if SEND_FRAMES:
  MAC_DUT0 = '8c:1f:64:69:10:05'
  MAC_DUT1 = '8c:1f:64:69:10:06'

# You may need to change these IP addresses.
# The following configuration assumes that
#   1. The IP addresses of Interface 0 of the router are link-local and prefix:0::1/64.
#   2. The IP addresses of Interface 1 of the router are link-local and prefix:1::1/64.
#   3. The IP addresses of Interface 2 of the router are link-local and prefix:2::1/64.
#   4. The IP addresses of Interface 3 of the router are link-local and prefix:3::1/64.
#   5. There exists a 2000::/3 route (not default route), and its next hop is Interface 3, TESTER3.
IP_PREFIX = '2a0e:aa06:497:'
IP_TESTER0 = IP_PREFIX + '0::2'
IP_TESTER1 = IP_PREFIX + '1::2'
IP_DUT0 = 'fe80::8e1f:64ff:fe69:1005'  # Device under test.
IP_DUT0_GUA = IP_PREFIX + '0::1'
IP_DUT1 = 'fe80::8e1f:64ff:fe69:1006'
IP_DUT3 = 'fe80::8e1f:64ff:fe69:1008'
IP_DEFAULT_ROUTE = 'fe80::8e1f:64ff:fe69:1004'  # The IP address of the default route.
IP_TEST_NDP = 'fe80::8888'
IP_TEST_DST = '2402:f000::1'  # Forward destination. Route should exist.
IP_TEST_DST_NO_MAC = IP_PREFIX + '0::100'  # Forward destination. Route should exist. MAC address should not exist.
IP_TEST_DST_NO_ROUTE = 'fd00::1'  # Forward destination. Route should not exist.
IP_RIP = 'ff02::9'  # RIP multicast group address.
INTERFACES = [f'tanlabs-veth{i}' for i in range(4)]

# frames.txt format:
# <Ingress Interface ID> <Frame Length> <Frame Data...>

fout = open('frames.txt', 'w')  # for simulation
pout = RawPcapWriter('in_frames.pcap', DLT_EN10MB)  # for wireshark


def write_frame(iface, f):
  print('Writing frame (interface #{}):'.format(iface))
  f.show()
  data = bytes(f)
  # We use VLAN ID to indicate the interface ID in pcap files.
  pout.write(data[:12] + struct.pack('>HH', 0x8100, 1000 + iface) + data[12:])
  fout.write('{} {} '.format(iface, len(data)))
  fout.write(' '.join(map(lambda x: '{:02x}'.format(x), data)))
  fout.write('\n')

  if SEND_FRAMES:
    sendp(f, iface=INTERFACES[iface])


def getll(mac):
  data = binascii.a2b_hex(mac.replace(':', ''))
  a = [0xfe, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, *data[:3], 0xff, 0xfe, *data[3:]]
  a[8] ^= 0x02
  return inet_ntop(socket.AF_INET6, a)


def getnsma(a):
  return inet_ntop(socket.AF_INET6, in6_getnsma(inet_pton(socket.AF_INET6, a)))


# Neighbor Solicitation test.
write_frame(0, Ether(src=MAC_TESTER0) /
            IPv6(src=IP_TESTER0, dst=getnsma(IP_DUT0)) /
            ICMPv6ND_NS(tgt=IP_DUT0) / ICMPv6NDOptSrcLLAddr(lladdr=MAC_TESTER0))

# Neighbor Solicitation test (use link-local address as source address).
write_frame(0, Ether(src=MAC_TESTER0) /
            IPv6(src=getll(MAC_TESTER0), dst=getnsma(IP_DUT0)) /
            ICMPv6ND_NS(tgt=IP_DUT0) / ICMPv6NDOptSrcLLAddr(lladdr=MAC_TESTER0))

# Neighbor Solicitation test (unicast with sender's MAC).
write_frame(0, Ether(src=MAC_TESTER0, dst=MAC_DUT0) /
            IPv6(src=IP_TESTER0, dst=IP_DUT0) /
            ICMPv6ND_NS(tgt=IP_DUT0) / ICMPv6NDOptSrcLLAddr(lladdr=MAC_TESTER0))

# Neighbor Solicitation test (unicast without sender's MAC).
write_frame(0, Ether(src=MAC_TESTER0, dst=MAC_DUT0) /
            IPv6(src=IP_TESTER0, dst=IP_DUT0) /
            ICMPv6ND_NS(tgt=IP_DUT0))

# Neighbor Advertisement test.
write_frame(0, Ether(src=MAC_TESTER0, dst=MAC_DUT0) /
            IPv6(src=IP_TESTER0, dst=IP_DUT0) /
            ICMPv6ND_NA(R=0, S=1, O=1, tgt=IP_TESTER0) / ICMPv6NDOptDstLLAddr(lladdr=MAC_TESTER0))

# Neighbor Advertisement test (link-local address).
write_frame(0, Ether(src=MAC_TESTER0, dst=MAC_DUT0) /
            IPv6(src=getll(MAC_TESTER0), dst=IP_DUT0) /
            ICMPv6ND_NA(R=0, S=1, O=1, tgt=getll(MAC_TESTER0)) / ICMPv6NDOptDstLLAddr(lladdr=MAC_TESTER0))

# Neighbor Advertisement test (source != target).
write_frame(0, Ether(src=MAC_TESTER0, dst=MAC_DUT0) /
            IPv6(src=IP_TESTER0, dst=IP_DUT0) /
            ICMPv6ND_NA(R=0, S=1, O=1, tgt=getll(MAC_TESTER0)) / ICMPv6NDOptDstLLAddr(lladdr=MAC_TESTER0))

# Neighbor Advertisement test (without sender's MAC).
write_frame(0, Ether(src=MAC_TESTER0, dst=MAC_DUT0) /
            IPv6(src=IP_TESTER0, dst=IP_DUT0) /
            ICMPv6ND_NA(R=0, S=1, O=0, tgt=IP_TESTER0))

# Fill the neighbor cache entry of TESTER1.
write_frame(1, Ether(src=MAC_TESTER1, dst=MAC_DUT1) /
            IPv6(src=IP_TESTER1, dst=IP_DUT1) /
            ICMPv6ND_NA(R=0, S=1, O=1, tgt=IP_TESTER1) / ICMPv6NDOptDstLLAddr(lladdr=MAC_TESTER1))

# Fill the neighbor cache entry of the default route.
write_frame(IFACE_DEFAULT_ROUTE, Ether(src=MAC_DEFAULT_ROUTE) /
            IPv6(src=IP_DEFAULT_ROUTE, dst=getnsma(IP_DUT3)) /
            ICMPv6ND_NS(tgt=IP_DUT3) / ICMPv6NDOptSrcLLAddr(lladdr=MAC_DEFAULT_ROUTE))

# Neighbor Solicitation test (DAD).
# Optional, you do not have to process DAD packets.
write_frame(0, Ether(src=MAC_TESTER0) /
            IPv6(src='::', dst=getnsma(IP_DUT0)) /
            ICMPv6ND_NS(tgt=IP_DUT0))

# Neighbor Advertisement test (DAD).
write_frame(0, Ether(src=MAC_TESTER0) /
            IPv6(src=IP_TESTER0, dst='ff02::1') /
            ICMPv6ND_NA(R=0, S=0, O=0, tgt=IP_TESTER0) / ICMPv6NDOptDstLLAddr(lladdr=MAC_TESTER0))

# Neighbor Solicitation test (bad hop-limit).
write_frame(0, Ether(src=MAC_TESTER0) /
            IPv6(src=IP_TESTER0, dst=getnsma(IP_DUT0), hlim=64) /
            ICMPv6ND_NS(tgt=IP_DUT0) / ICMPv6NDOptSrcLLAddr(lladdr=MAC_TESTER0))

# Neighbor Solicitation test (bad ICMP code).
write_frame(0, Ether(src=MAC_TESTER0) /
            IPv6(src=IP_TESTER0, dst=getnsma(IP_DUT0)) /
            ICMPv6ND_NS(code=42, tgt=IP_DUT0) / ICMPv6NDOptSrcLLAddr(lladdr=MAC_TESTER0))

# Neighbor Solicitation test (bad checksum).
write_frame(0, Ether(src=MAC_TESTER0) /
            IPv6(src=IP_TESTER0, dst=getnsma(IP_DUT0)) /
            ICMPv6ND_NS(tgt=IP_DUT0, cksum=0x2222) / ICMPv6NDOptSrcLLAddr(lladdr=MAC_TESTER0))

# Neighbor Solicitation test (wrong payload length).
write_frame(0, Ether(src=MAC_TESTER0, dst=MAC_DUT0) /
            IPv6(src=IP_TESTER0, dst=IP_DUT0, plen=32) /
            ICMPv6ND_NS(tgt=IP_DUT0))

# Neighbor Solicitation test (bad option).
write_frame(0, Ether(src=MAC_TESTER0) /
            IPv6(src=IP_TESTER0, dst=getnsma(IP_DUT0)) /
            ICMPv6ND_NS(tgt=IP_DUT0) / b'\x01\x00\x01\x00\x01\x00\x01\x00')

# Neighbor Solicitation test (target address is not mine).
write_frame(0, Ether(src=MAC_TESTER0) /
            IPv6(src=IP_TESTER0, dst=getnsma(IP_TEST_NDP)) /
            ICMPv6ND_NS(tgt=IP_TEST_NDP) / ICMPv6NDOptSrcLLAddr(lladdr=MAC_TESTER0))

# Neighbor Solicitation test (DAD, but unicast).
write_frame(0, Ether(src=MAC_TESTER0, dst=MAC_DUT0) /
            IPv6(src='::', dst=IP_DUT0) /
            ICMPv6ND_NS(tgt=IP_DUT0))

# Neighbor Solicitation test (DAD, but with sender's MAC).
write_frame(0, Ether(src=MAC_TESTER0) /
            IPv6(src='::', dst=getnsma(IP_DUT0)) /
            ICMPv6ND_NS(tgt=IP_DUT0) / ICMPv6NDOptSrcLLAddr(lladdr=MAC_TESTER0))

# Neighbor Advertisement test (DAD, but S=1).
write_frame(0, Ether(src=MAC_TESTER0) /
            IPv6(src=IP_TESTER0, dst='ff02::1') /
            ICMPv6ND_NA(R=0, S=1, O=0, tgt=IP_TESTER0) / ICMPv6NDOptDstLLAddr(lladdr=MAC_TESTER0))

# Simple IP forwarding test.
write_frame(0, Ether(src=MAC_TESTER0, dst=MAC_DUT0) /
            IPv6(src=IP_TESTER0, dst=IP_TEST_DST) /
            UDP(sport=7, dport=7) / b'hello, 00001')

# Simple IP forwarding test (direct routes).
write_frame(0, Ether(src=MAC_TESTER0, dst=MAC_DUT0) /
            IPv6(src=IP_TESTER0, dst=IP_TESTER1) /
            UDP(sport=7, dport=7) / b'hello, 00002')

# Destination MAC is not the router's, should not be forwarded.
write_frame(0, Ether(src=MAC_TESTER0, dst=MAC_OTHERS) /
            IPv6(src=IP_TESTER0, dst=IP_TESTER1) /
            UDP(sport=7, dport=7) / b'hello, 00003')

# Packet to the router itself, should not be forwarded.
write_frame(0, Ether(src=MAC_TESTER0, dst=MAC_DUT0) /
            IPv6(src=IP_TESTER0, dst=IP_DUT0) /
            UDP(sport=7, dport=7) / b'hello, 00004')

# Simple IP forwarding test (no MAC).
write_frame(1, Ether(src=MAC_TESTER1, dst=MAC_DUT1) /
            IPv6(src=IP_TESTER1, dst=IP_TEST_DST_NO_MAC) /
            UDP(sport=7, dport=7) / b'hello, 00005')

# Simple IP forwarding test (no route).
write_frame(1, Ether(src=MAC_TESTER1, dst=MAC_DUT1) /
            IPv6(src=IP_TESTER1, dst=IP_TEST_DST_NO_ROUTE) /
            UDP(sport=7, dport=7) / b'hello, 00006')

# hop-limit=2 test.
write_frame(0, Ether(src=MAC_TESTER0, dst=MAC_DUT0) /
            IPv6(src=IP_TESTER0, dst=IP_TEST_DST, hlim=2) /
            UDP(sport=7, dport=7) / b'hello, 00007')

# hop-limit=1 test.
write_frame(0, Ether(src=MAC_TESTER0, dst=MAC_DUT0) /
            IPv6(src=IP_TESTER0, dst=IP_TEST_DST, hlim=1) /
            UDP(sport=7, dport=7) / b'hello, 00008')

# hop-limit=0 test.
write_frame(0, Ether(src=MAC_TESTER0, dst=MAC_DUT0) /
            IPv6(src=IP_TESTER0, dst=IP_TEST_DST, hlim=0) /
            UDP(sport=7, dport=7) / b'hello, 00009')

# IP packet with hop-limit=1. Also, route does not exist.
write_frame(0, Ether(src=MAC_TESTER0, dst=MAC_DUT0) /
            IPv6(src=IP_TESTER0, dst=IP_TEST_DST_NO_ROUTE, hlim=1) /
            UDP(sport=7, dport=7) / b'hello, 00010')

# Packet to the router itself, GUA.
write_frame(0, Ether(src=MAC_TESTER0, dst=MAC_DUT0) /
            IPv6(src=IP_TESTER0, dst=IP_DUT0_GUA) /
            UDP(sport=7, dport=7) / b'hello, 00011')

# Packet to the router itself, hop-limit=1.
write_frame(0, Ether(src=MAC_TESTER0, dst=MAC_DUT0) /
            IPv6(src=IP_TESTER0, dst=IP_DUT0_GUA, hlim=1) /
            UDP(sport=7, dport=7) / b'hello, 00012')

# Packet to the router itself, hop-limit=0.
write_frame(0, Ether(src=MAC_TESTER0, dst=MAC_DUT0) /
            IPv6(src=IP_TESTER0, dst=IP_DUT0_GUA, hlim=0) /
            UDP(sport=7, dport=7) / b'hello, 00013')

# L2 garbage test.
write_frame(0, Ether(b'BeLrYEeECrHIsbxfm734+jLpfJshQTmHsz+NJrYR8PCKodcW9OU8p+jPotD00014'))

# L3 garbage test (IPv4).
write_frame(0, Ether(src=MAC_TESTER0, dst=MAC_DUT0, type='IPv4') /
            b'BeLrYEeECrHIsbxfm734+jLpfJshQTmHsz+NJrYR8PCKodcW9OU8p+jPotD00015')

# L3 garbage test (ARP).
write_frame(0, Ether(src=MAC_TESTER0, dst=MAC_DUT0, type='ARP') /
            b'BeLrYEeECrHIsbxfm734+jLpfJshQTmHsz+NJrYR8PCKodcW9OU8p+jPotD00016')

# L3 garbage test (IPv6).
write_frame(0, Ether(src=MAC_TESTER0, dst=MAC_DUT0, type='IPv6') /
            b'BeLrYEeECrHIsbxfm734+jLpfJshQTmHsz+NJrYR8PCKodcW9OU8p+jPotD00017')

# RIP test.
write_frame(1, Ether(src=MAC_TESTER1) /
            IPv6(src=getll(MAC_TESTER1), dst=IP_RIP, hlim=1) /
            UDP() /
            RIPng() /
            RIPngEntry(prefix_or_nh='2001:da8:200::', prefixlen=48) /
            RIPngEntry(prefix_or_nh='2402:f000::', prefixlen=32) /
            RIPngEntry(prefix_or_nh='240a:a000::', prefixlen=20))

# RIP test (bad, source address is GUA).
write_frame(1, Ether(src=MAC_TESTER1) /
            IPv6(src=IP_TESTER1, dst=IP_RIP, hlim=1) /
            UDP() /
            RIPng() /
            RIPngEntry(prefix_or_nh='2001:da8:200::', prefixlen=48) /
            RIPngEntry(prefix_or_nh='2402:f000::', prefixlen=32) /
            RIPngEntry(prefix_or_nh='240a:a000::', prefixlen=20))

# RIP test (wrong checksum).
write_frame(1, Ether(src=MAC_TESTER1) /
            IPv6(src=getll(MAC_TESTER1), dst=IP_RIP, hlim=1) /
            UDP(chksum=0x2222) /
            RIPng() /
            RIPngEntry(prefix_or_nh='2001:da8:200::', prefixlen=48) /
            RIPngEntry(prefix_or_nh='2402:f000::', prefixlen=32) /
            RIPngEntry(prefix_or_nh='240a:a000::', prefixlen=20))

# RIP test (no checksum, illegal in IPv6).
write_frame(1, Ether(src=MAC_TESTER1) /
            IPv6(src=getll(MAC_TESTER1), dst=IP_RIP, hlim=1) /
            UDP(chksum=0x0000) /
            RIPng() /
            RIPngEntry(prefix_or_nh='2001:da8:200::', prefixlen=48) /
            RIPngEntry(prefix_or_nh='2402:f000::', prefixlen=32) /
            RIPngEntry(prefix_or_nh='240a:a000::', prefixlen=20))

# You can construct more frames to test your datapath.

fout.close()
pout.close()
exit(0)
