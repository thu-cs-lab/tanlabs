#!/usr/bin/env python3

# Requirements:
#   sudo apt install python3-pip
#   sudo pip3 install scapy
# Usage:
#   ./gen_frame [send]
# or
#   python3 gen_frame [send]

from scapy import *
from scapy.utils import *
from scapy.layers.l2 import *
from scapy.layers.inet import *
import sys
import struct

SEND_FRAMES = len(sys.argv) >= 2 and sys.argv[1] == 'send'

MAC_BROADCAST = 'ff:ff:ff:ff:ff:ff'
MAC_TESTER = '54:45:53:54:5f:30'
MAC_DUT = '54:57:44:32:30:30'
IP_TESTER = '10.8.8.2'
IP_DUT = '10.8.8.100'  # Device under test.
PORT_TESTER = 12345
PORT_DUT = 60000

# frames.txt format:
# <Ingress Interface ID> <Frame Length> <Frame Data...>

fout = open('frames.txt', 'w')  # for simulation
pout = RawPcapWriter('in_frames.pcap', DLT_EN10MB)  # for wireshark


def write_frame(iface, f):
  print('Writing frame (interface #{}):'.format(iface))
  f.show()
  data = bytes(f)
  # We use VLAN ID to indicate the interface ID in pcap files.
  pout.write(data[:12] + struct.pack('>HH', 0x8100, 1000 + iface) + data[12:])
  fout.write('{} {} '.format(iface, len(data)))
  fout.write(' '.join(map(lambda x: '{:02x}'.format(x), data)))
  fout.write('\n')

  if SEND_FRAMES:
    sendp(f, iface='tanlabs-veth{}'.format(iface))

# ARP request test.
for i in range(10):
  write_frame(0, Ether(src=MAC_TESTER, dst=MAC_BROADCAST) /
              ARP(op='who-has', hwsrc=MAC_TESTER, psrc=IP_TESTER, hwdst=MAC_BROADCAST, pdst=IP_DUT))

write_frame(0, Ether(b'A' * 64))

# UDP test (checksum wrong)
write_frame(0, Ether(src=MAC_TESTER, dst=MAC_DUT) /
            IP(src=IP_TESTER, dst=IP_DUT) /
            UDP(sport=PORT_TESTER, dport=PORT_DUT, chksum=0x1234) /
            (b'\xAA' * 16))

write_frame(0, Ether(src=MAC_TESTER, dst=MAC_DUT) /
            IP(src=IP_TESTER, dst=IP_DUT) /
            UDP(sport=PORT_TESTER, dport=PORT_DUT) /
            (struct.pack('>QQ', 1234567890 | (1 << 63), 9876543210)))

# You can construct more frames to test your datapath.

fout.close()
pout.close()
exit(0)
